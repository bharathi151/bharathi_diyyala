{"filter":false,"title":"domain_details_interactor.py","tooltip":"/ib_miniprojects_backend/gyaan/interactors/domain_details_interactor.py","undoManager":{"mark":21,"position":21,"stack":[[{"start":{"row":0,"column":0},"end":{"row":73,"column":0},"action":"remove","lines":["from typing import List","from gyaan.interactors.storages.storage_interface import StorageInterface","from gyaan.interactors.presenters.presenter_interface import PresenterInterface","from gyaan.interactors.presenters.dtos import *","from gyaan.constants.exceptions import *","","class GetDomainDetailsInteractor:","    def __init__(self, storage: StorageInterface):","        self.storage = storage","","    def get_domain_details_wrapper(self, ","                           presenter: PresenterInterface,","                           domain_id: int,","                           user_id: int):","        self.presenter = presenter","        try:","           domain_details_dto = self.get_domain_details(","                domain_id=domain_id,","                user_id=user_id","            )","        except InvalidDomainId:","            return self.presenter.raise_invalid_domain_id_exception()","        except UserNotDomainFollower:","            return self.presenter.raise_invalid_domain_member_exception()","","        return self.presenter.get_domain_details_response(","                domain_details_dto=domain_details_dto","            )","","    def get_domain_details(self, domain_id: int, user_id: int):","        is_invalid_domain_id = not self.storage.is_valid_domain_id(domain_id=domain_id)","        if is_invalid_domain_id:","            raise InvalidDomainId","","        is_user_not_domain_member = not self.storage.is_user_domain_follower(","            domain_id=domain_id, user_id=user_id","        )","        if is_user_not_domain_member:","            raise UserNotDomainFollower","","        domain_dto = self.storage.get_domain_dto(domain_id=domain_id)","        experts_ids = self.storage.get_domain_experts_ids(domain_id=domain_id)","        experts_dtos = self.storage.get_domain_experts_dtos(experts_ids=experts_ids)","        domain_stats_dto = self.storage.get_domain_stats_dto(domain_id=domain_id)","","        is_user_domain_expert = self.storage.is_user_domain_expert(","            domain_id=domain_id, user_id=user_id","        )","        join_requests, requested_user_dtos = [], []","        if is_user_domain_expert:","            join_requests, requested_user_dtos = self. \\","                    _get_requests_details(domain_id=domain_id)","        domain_details_dto = DomainDetailsDto(","            domain=domain_dto,","            domain_stats=domain_stats_dto,","            domain_experts=experts_dtos,","            user_id=user_id,","            is_user_domain_expert=is_user_domain_expert,","            join_requests=join_requests,","            requested_users=requested_user_dtos","        )","        return domain_details_dto","","    def _get_requests_details(self, domain_id):","        domain_join_requests= self.storage.get_domain_join_requests(","            domain_id=domain_id","        )","        requested_user_ids = [dto.user_id for dto in domain_join_requests]","        requests_user_dtos = self.storage.get_users_details_dtos(","            user_ids=requested_user_ids","        )","        return domain_join_requests, requests_user_dtos","",""],"id":622}],[{"start":{"row":0,"column":0},"end":{"row":78,"column":0},"action":"insert","lines":["from typing import List","from gyaan.interactors.storages.storage_interface import StorageInterface","from gyaan.adapters.service_adapter import get_service_adapter","from gyaan.interactors.presenters.presenter_interface import PresenterInterface","from gyaan.interactors.presenters.dtos import *","from gyaan.constants.exceptions import *","","class GetDomainDetailsInteractor:","    def __init__(self, storage: StorageInterface):","        self.storage = storage","","    def get_domain_details_wrapper(self, ","                           presenter: PresenterInterface,","                           domain_id: int,","                           user_id: int):","        self.presenter = presenter","        try:","           domain_details_dto = self.get_domain_details(","                domain_id=domain_id,","                user_id=user_id","            )","        except InvalidDomainId:","            return self.presenter.raise_invalid_domain_id_exception()","        except UserNotDomainFollower:","            return self.presenter.raise_invalid_domain_member_exception()","","        return self.presenter.get_domain_details_response(","                domain_details_dto=domain_details_dto","            )","","    def get_domain_details(self, domain_id: int, user_id: int):","        is_invalid_domain_id = not self.storage.is_valid_domain_id(domain_id=domain_id)","        if is_invalid_domain_id:","            raise InvalidDomainId","","        is_user_not_domain_member = not self.storage.is_user_domain_follower(","            domain_id=domain_id, user_id=user_id","        )","        if is_user_not_domain_member:","            raise UserNotDomainFollower","","        domain_dto = self.storage.get_domain_dto(domain_id=domain_id)","        experts_ids = self.storage.get_domain_experts_ids(domain_id=domain_id)","        service_adapter = get_service_adapter()","        experts_dtos = service_adapter.auth_service.get_user_dtos(","            user_ids=experts_ids","        )","        # experts_dtos = self.storage.get_domain_experts_dtos(experts_ids=experts_ids)","        domain_stats_dto = self.storage.get_domain_stats_dto(domain_id=domain_id)","","        is_user_domain_expert = self.storage.is_user_domain_expert(","            domain_id=domain_id, user_id=user_id","        )","        join_requests, requested_user_dtos = [], []","        if is_user_domain_expert:","            join_requests, requested_user_dtos = self. \\","                    _get_requests_details(domain_id=domain_id)","        domain_details_dto = DomainDetailsDto(","            domain=domain_dto,","            domain_stats=domain_stats_dto,","            domain_experts=experts_dtos,","            user_id=user_id,","            is_user_domain_expert=is_user_domain_expert,","            join_requests=join_requests,","            requested_users=requested_user_dtos","        )","        return domain_details_dto","","    def _get_requests_details(self, domain_id):","        domain_join_requests= self.storage.get_domain_join_requests(","            domain_id=domain_id","        )","        requested_user_ids = [dto.user_id for dto in domain_join_requests]","        requests_user_dtos = service_adapter.auth_service.get_user_dtos(","            user_ids=experts_ids","        )","        return domain_join_requests, requests_user_ids","",""],"id":623}],[{"start":{"row":74,"column":21},"end":{"row":74,"column":32},"action":"remove","lines":["experts_ids"],"id":624},{"start":{"row":74,"column":21},"end":{"row":74,"column":38},"action":"insert","lines":["requests_user_ids"]}],[{"start":{"row":76,"column":37},"end":{"row":76,"column":54},"action":"remove","lines":["requests_user_ids"],"id":625},{"start":{"row":76,"column":37},"end":{"row":76,"column":55},"action":"insert","lines":["requests_user_dtos"]}],[{"start":{"row":74,"column":28},"end":{"row":74,"column":29},"action":"remove","lines":["s"],"id":626}],[{"start":{"row":74,"column":28},"end":{"row":74,"column":29},"action":"insert","lines":["e"],"id":627},{"start":{"row":74,"column":29},"end":{"row":74,"column":30},"action":"insert","lines":["d"]}],[{"start":{"row":76,"column":44},"end":{"row":76,"column":45},"action":"remove","lines":["s"],"id":628}],[{"start":{"row":76,"column":44},"end":{"row":76,"column":45},"action":"insert","lines":["e"],"id":629},{"start":{"row":76,"column":45},"end":{"row":76,"column":46},"action":"insert","lines":["d"]}],[{"start":{"row":76,"column":37},"end":{"row":76,"column":56},"action":"remove","lines":["requested_user_dtos"],"id":630},{"start":{"row":76,"column":37},"end":{"row":76,"column":38},"action":"insert","lines":["v"]}],[{"start":{"row":76,"column":37},"end":{"row":76,"column":38},"action":"remove","lines":["v"],"id":631}],[{"start":{"row":76,"column":37},"end":{"row":76,"column":55},"action":"insert","lines":["requests_user_dtos"],"id":632}],[{"start":{"row":72,"column":74},"end":{"row":73,"column":0},"action":"insert","lines":["",""],"id":633},{"start":{"row":73,"column":0},"end":{"row":73,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":73,"column":8},"end":{"row":73,"column":47},"action":"insert","lines":["service_adapter = get_service_adapter()"],"id":634}],[{"start":{"row":78,"column":0},"end":{"row":79,"column":0},"action":"remove","lines":["",""],"id":635}],[{"start":{"row":48,"column":40},"end":{"row":48,"column":41},"action":"insert","lines":[" "],"id":636}],[{"start":{"row":48,"column":41},"end":{"row":48,"column":42},"action":"insert","lines":["\\"],"id":637}],[{"start":{"row":48,"column":42},"end":{"row":49,"column":0},"action":"insert","lines":["",""],"id":638},{"start":{"row":49,"column":0},"end":{"row":49,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":49,"column":8},"end":{"row":49,"column":12},"action":"insert","lines":["    "],"id":639}],[{"start":{"row":31,"column":48},"end":{"row":31,"column":49},"action":"insert","lines":[" "],"id":641},{"start":{"row":31,"column":49},"end":{"row":31,"column":50},"action":"insert","lines":["\\"]}],[{"start":{"row":31,"column":50},"end":{"row":32,"column":0},"action":"insert","lines":["",""],"id":642},{"start":{"row":32,"column":0},"end":{"row":32,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":32,"column":8},"end":{"row":32,"column":12},"action":"insert","lines":["    "],"id":643}],[{"start":{"row":0,"column":23},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":644}]]},"ace":{"folds":[],"scrolltop":826,"scrollleft":0,"selection":{"start":{"row":1,"column":0},"end":{"row":1,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":47,"state":"start","mode":"ace/mode/python"}},"timestamp":1593701638461,"hash":"ee61f6cd8b651f93f127283b480c512e09097826"}