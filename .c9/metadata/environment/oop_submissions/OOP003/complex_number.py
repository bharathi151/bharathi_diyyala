{"filter":false,"title":"complex_number.py","tooltip":"/oop_submissions/OOP003/complex_number.py","undoManager":{"mark":18,"position":18,"stack":[[{"start":{"row":65,"column":0},"end":{"row":69,"column":20},"action":"remove","lines":["","c=ComplexNumber(1,2)","d=ComplexNumber(3,4)","e=c/d","print(c.conjugate())"],"id":2}],[{"start":{"row":16,"column":28},"end":{"row":16,"column":29},"action":"remove","lines":["%"],"id":3},{"start":{"row":16,"column":27},"end":{"row":16,"column":28},"action":"remove","lines":[" "]},{"start":{"row":16,"column":26},"end":{"row":16,"column":27},"action":"remove","lines":["'"]},{"start":{"row":16,"column":25},"end":{"row":16,"column":26},"action":"remove","lines":["i"]},{"start":{"row":16,"column":24},"end":{"row":16,"column":25},"action":"remove","lines":["g"]},{"start":{"row":16,"column":23},"end":{"row":16,"column":24},"action":"remove","lines":["%"]},{"start":{"row":16,"column":22},"end":{"row":16,"column":23},"action":"remove","lines":["-"]},{"start":{"row":16,"column":21},"end":{"row":16,"column":22},"action":"remove","lines":["g"]},{"start":{"row":16,"column":20},"end":{"row":16,"column":21},"action":"remove","lines":["%"]}],[{"start":{"row":16,"column":19},"end":{"row":16,"column":20},"action":"remove","lines":["'"],"id":4}],[{"start":{"row":16,"column":19},"end":{"row":16,"column":20},"action":"insert","lines":["C"],"id":5}],[{"start":{"row":16,"column":19},"end":{"row":16,"column":20},"action":"remove","lines":["C"],"id":6},{"start":{"row":16,"column":19},"end":{"row":16,"column":32},"action":"insert","lines":["ComplexNumber"]}],[{"start":{"row":16,"column":49},"end":{"row":16,"column":50},"action":"insert","lines":["-"],"id":7},{"start":{"row":16,"column":50},"end":{"row":16,"column":51},"action":"insert","lines":["("]}],[{"start":{"row":16,"column":70},"end":{"row":16,"column":71},"action":"insert","lines":[")"],"id":8}],[{"start":{"row":18,"column":28},"end":{"row":18,"column":29},"action":"remove","lines":["%"],"id":9},{"start":{"row":18,"column":27},"end":{"row":18,"column":28},"action":"remove","lines":[" "]},{"start":{"row":18,"column":26},"end":{"row":18,"column":27},"action":"remove","lines":["'"]},{"start":{"row":18,"column":25},"end":{"row":18,"column":26},"action":"remove","lines":["i"]},{"start":{"row":18,"column":24},"end":{"row":18,"column":25},"action":"remove","lines":["g"]},{"start":{"row":18,"column":23},"end":{"row":18,"column":24},"action":"remove","lines":["%"]},{"start":{"row":18,"column":22},"end":{"row":18,"column":23},"action":"remove","lines":["+"]},{"start":{"row":18,"column":21},"end":{"row":18,"column":22},"action":"remove","lines":["g"]}],[{"start":{"row":18,"column":20},"end":{"row":18,"column":21},"action":"remove","lines":["%"],"id":10}],[{"start":{"row":18,"column":19},"end":{"row":18,"column":20},"action":"remove","lines":["'"],"id":11}],[{"start":{"row":18,"column":19},"end":{"row":18,"column":20},"action":"insert","lines":["C"],"id":12}],[{"start":{"row":18,"column":19},"end":{"row":18,"column":20},"action":"remove","lines":["C"],"id":13},{"start":{"row":18,"column":19},"end":{"row":18,"column":32},"action":"insert","lines":["ComplexNumber"]}],[{"start":{"row":34,"column":27},"end":{"row":34,"column":28},"action":"remove","lines":["r"],"id":14},{"start":{"row":34,"column":26},"end":{"row":34,"column":27},"action":"remove","lines":["e"]},{"start":{"row":34,"column":25},"end":{"row":34,"column":26},"action":"remove","lines":["b"]},{"start":{"row":34,"column":24},"end":{"row":34,"column":25},"action":"remove","lines":["m"]},{"start":{"row":34,"column":23},"end":{"row":34,"column":24},"action":"remove","lines":["u"]},{"start":{"row":34,"column":22},"end":{"row":34,"column":23},"action":"remove","lines":["N"]},{"start":{"row":34,"column":21},"end":{"row":34,"column":22},"action":"remove","lines":["x"]},{"start":{"row":34,"column":20},"end":{"row":34,"column":21},"action":"remove","lines":["e"]},{"start":{"row":34,"column":19},"end":{"row":34,"column":20},"action":"remove","lines":["l"]},{"start":{"row":34,"column":18},"end":{"row":34,"column":19},"action":"remove","lines":["p"]},{"start":{"row":34,"column":17},"end":{"row":34,"column":18},"action":"remove","lines":["m"]}],[{"start":{"row":34,"column":16},"end":{"row":34,"column":17},"action":"remove","lines":["o"],"id":15},{"start":{"row":34,"column":15},"end":{"row":34,"column":16},"action":"remove","lines":["C"]},{"start":{"row":34,"column":14},"end":{"row":34,"column":15},"action":"remove","lines":[" "]}],[{"start":{"row":34,"column":14},"end":{"row":34,"column":15},"action":"remove","lines":["("],"id":16}],[{"start":{"row":34,"column":14},"end":{"row":34,"column":15},"action":"insert","lines":[" "],"id":17}],[{"start":{"row":34,"column":77},"end":{"row":34,"column":78},"action":"remove","lines":[")"],"id":18}],[{"start":{"row":0,"column":0},"end":{"row":65,"column":0},"action":"remove","lines":["","import math","","class ComplexNumber:","    def __init__(self,real_part=0,imaginary_part=0):","        if type(real_part)==str and type(imaginary_part)!=str:","            raise ValueError(\"Invalid value for real part\")","        if type(real_part)!=str and type(imaginary_part)==str:","            raise ValueError(\"Invalid value for imaginary part\")","        if type(real_part)==str and type(imaginary_part)==str:","            raise ValueError(\"Invalid value for real and imaginary part\")","        self.real_part=real_part","        self.imaginary_part=imaginary_part","","    def conjugate(self):","        if self.imaginary_part>=0:","            return ComplexNumber(self.real_part, -(self.imaginary_part))","        else:","            return ComplexNumber(self.real_part, abs(self.imaginary_part))","    def __add__(self, other):","        if self.imaginary_part + other.imaginary_part>=0:","            return ComplexNumber(self.real_part + other.real_part,self.imaginary_part + other.imaginary_part)","        else:","            ","            return ComplexNumber(self.real_part + other.real_part,self.imaginary_part + other.imaginary_part)","    ","    def __sub__(self, other):","        if self.imaginary_part - other.imaginary_part>=0:","            return ComplexNumber(self.real_part - other.real_part,self.imaginary_part - other.imaginary_part)","        else:","            ","            return ComplexNumber(self.real_part - other.real_part,self.imaginary_part - other.imaginary_part)","    ","    def __abs__(self):","        return round(math.sqrt(self.real_part**2 + self.imaginary_part**2),3)","    ","    def __mul__(self, other):","        if self.imaginary_part*other.real_part + self.real_part*other.imaginary_part>=0:","            return ComplexNumber(self.real_part*other.real_part - self.imaginary_part*other.imaginary_part,","                       self.imaginary_part*other.real_part + self.real_part*other.imaginary_part)","        else:","            ","            return ComplexNumber(self.real_part*other.real_part - self.imaginary_part*other.imaginary_part,","                       self.imaginary_part*other.real_part + self.real_part*other.imaginary_part)","    def __truediv__(self, other):","        divider= other.real_part**2 + other.imaginary_part**2","        real,imaginary=((self.real_part*other.real_part)+(self.imaginary_part*other.imaginary_part))/divider, ((self.imaginary_part*other.real_part)-(self.real_part*other.imaginary_part))/divider","        ","        if (other.real_part**2 + other.imaginary_part**2)<0 and (other.real_part**2 + other.imaginary_part**2)>-1:","            raise ZeroDivisionError(\"division by zero\")","        else:","            if imaginary>=0:","                return ComplexNumber(real,imaginary)","            return ComplexNumber(real,imaginary)","        ","    def __eq__(self, other):","        return self.real_part == other.real_part and self.imaginary_part == other.imaginary_part","    def __str__(self):","        if self.imaginary_part>=0:","            return '%g+%gi'%(self.real_part, self.imaginary_part)","        else:","            return '%g%gi' %(self.real_part, self.imaginary_part)","        ","","",""],"id":19}],[{"start":{"row":0,"column":0},"end":{"row":65,"column":0},"action":"insert","lines":["","import math","","class ComplexNumber:","    def __init__(self,real_part=0,imaginary_part=0):","        if type(real_part)==str and type(imaginary_part)!=str:","            raise ValueError(\"Invalid value for real part\")","        if type(real_part)!=str and type(imaginary_part)==str:","            raise ValueError(\"Invalid value for imaginary part\")","        if type(real_part)==str and type(imaginary_part)==str:","            raise ValueError(\"Invalid value for real and imaginary part\")","        self.real_part=real_part","        self.imaginary_part=imaginary_part","","    def conjugate(self):","        if self.imaginary_part>=0:","            return ComplexNumber(self.real_part, -(self.imaginary_part))","        else:","            return ComplexNumber(self.real_part, abs(self.imaginary_part))","    def __add__(self, other):","        if self.imaginary_part + other.imaginary_part>=0:","            return ComplexNumber(self.real_part + other.real_part,self.imaginary_part + other.imaginary_part)","        else:","            ","            return ComplexNumber(self.real_part + other.real_part,self.imaginary_part + other.imaginary_part)","    ","    def __sub__(self, other):","        if self.imaginary_part - other.imaginary_part>=0:","            return ComplexNumber(self.real_part - other.real_part,self.imaginary_part - other.imaginary_part)","        else:","            ","            return ComplexNumber(self.real_part - other.real_part,self.imaginary_part - other.imaginary_part)","    ","    def __abs__(self):","        return round(math.sqrt(self.real_part**2 + self.imaginary_part**2),3)","    ","    def __mul__(self, other):","        if self.imaginary_part*other.real_part + self.real_part*other.imaginary_part>=0:","            return ComplexNumber(self.real_part*other.real_part - self.imaginary_part*other.imaginary_part,","                       self.imaginary_part*other.real_part + self.real_part*other.imaginary_part)","        else:","            ","            return ComplexNumber(self.real_part*other.real_part - self.imaginary_part*other.imaginary_part,","                       self.imaginary_part*other.real_part + self.real_part*other.imaginary_part)","    def __truediv__(self, other):","        divider= other.real_part**2 + other.imaginary_part**2","        real,imaginary=((self.real_part*other.real_part)+(self.imaginary_part*other.imaginary_part))/divider, ((self.imaginary_part*other.real_part)-(self.real_part*other.imaginary_part))/divider","        ","        if (other.real_part**2 + other.imaginary_part**2)<0 and (other.real_part**2 + other.imaginary_part**2)>-1:","            raise ZeroDivisionError(\"division by zero\")","        else:","            if imaginary>=0:","                return ComplexNumber(real,imaginary)","            return ComplexNumber(real,imaginary)","        ","    def __eq__(self, other):","        return self.real_part == other.real_part and self.imaginary_part == other.imaginary_part","    def __str__(self):","        if self.imaginary_part>=0:","            return '%g+%gi'%(self.real_part, self.imaginary_part)","        else:","            return '%g%gi' %(self.real_part, self.imaginary_part)","        ","","",""],"id":20,"ignore":true}]]},"ace":{"folds":[],"scrolltop":944,"scrollleft":0,"selection":{"start":{"row":65,"column":0},"end":{"row":65,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":33,"state":"start","mode":"ace/mode/python"}},"timestamp":1582000786926,"hash":"e75941b89ae063424b0dcbac5ddfd36f3a16e195"}