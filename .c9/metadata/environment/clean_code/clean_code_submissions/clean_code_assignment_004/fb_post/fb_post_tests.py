{"filter":false,"title":"fb_post_tests.py","tooltip":"/clean_code/clean_code_submissions/clean_code_assignment_004/fb_post/fb_post_tests.py","undoManager":{"mark":9,"position":9,"stack":[[{"start":{"row":275,"column":0},"end":{"row":385,"column":0},"action":"remove","lines":["@pytest.mark.django_db","def test_react_to_comment_with_invalid_user_id_raises_InvalidUserException(user,comment):","    #arrange","    user_id = 2","    comment_id = 1","    reaction_type = \"HAHA\"","    #act","    with pytest.raises(InvalidUserException) as e:","        assert react_to_comment(user_id,comment_id,reaction_type)","    ","    #assert","    user = User.objects.filter(id = user_id)","    ","    assert str(e.value)   ==   \"\"","    assert len(user)   ==   0","    ","@pytest.mark.django_db","def test_react_comment_with_invalid_comment_id_raises_InvalidCommentException(user,comment):","    #arrange","    user_id = 1","    comment_id = 3","    reaction_type = \"HAHA\"","    #act","    with pytest.raises(InvalidCommentException) as e:","        assert react_to_comment(user_id,comment_id,reaction_type)","    ","    #assert","    comment = Comment.objects.filter(id = comment_id)","    ","    assert str(e.value)   ==   \"\"","    assert len(comment)   ==   0","","    ","    ","@pytest.mark.django_db","def test_react_to_comment_with_invalid_reaction_type_raises_InvalidReactionTypeException(user,comment):","    #arrange","    user_id = 1","    comment_id = 1","    reaction_type = \"LIKE\"","    #act","    with pytest.raises(InvalidReactionTypeException) as e:","        assert react_to_comment(user_id,comment_id,reaction_type)","    ","    #assert","    assert str(e.value)   ==   \"\"","    # assert reaction_type not in ['WOW','LIT','LOVE','HAHA','THUMBS-UP','THUMBS-DOWN','ANGRY','SAD']","","@pytest.mark.django_db","def test_react_to_comment_with_valid_details_creates_new_reaction(user,comment):","    ","    #arrange","    user_id = 1","    comment_id = 1","    reaction_type = \"HAHA\"","    ","    #act","    react_to_comment(user_id,comment_id,reaction_type)","    ","    ","    #assert","    #extra","    reaction = Reaction.objects.get(reacted_by_id = user_id,comment_id = comment_id,reaction = reaction_type)","    ","    assert reaction.reacted_by  ==  user","    assert reaction.comment  ==  comment","    assert reaction.reaction  ==  reaction_type","    # assert reaction.reaction in ['WOW','LIT','LOVE','HAHA','THUMBS-UP','THUMBS-DOWN','ANGRY','SAD']","    ","@pytest.mark.django_db","def test_react_to_comment_with_same_reaction_deletes_reaction(user,comment,comment_reaction):","    ","    #arrange","    user_id = 1","    comment_id = 1","    reaction_type = \"LIT\"","    ","    #act","    react_to_comment(user_id,comment_id,reaction_type)","    ","    #assert","    #extra","    reaction = Reaction.objects.filter(reacted_by_id = user.id,comment_id = comment.id,reaction = reaction_type)","    ","    ","    assert len(reaction)  ==  0","    ","#@pytest.mark.django_db","@pytest.mark.parametrize(\"my_user_id,new_reaction_type\", [(1,\"ANGRY\"), (3,\"WOW\")])","","","@pytest.mark.django_db","def test_react_to_comment_with_different_reaction_updates_reaction(users,comment,comment_reaction,new_reaction_type,my_user_id):","    ","    #arrange","    user_id = my_user_id","    comment_id = 1","    reaction_type = new_reaction_type","    ","    #act","    react_to_comment(user_id,comment_id,reaction_type)","    ","    #assert","    #extra","    reaction = Reaction.objects.get(reacted_by_id = user_id,comment_id = comment_id,reaction = reaction_type)","    ","    assert reaction.reacted_by_id  ==  my_user_id","    assert reaction.comment  ==  comment","    assert reaction.reaction  ==  reaction_type ","    # assert reaction.reaction in ['WOW','LIT','LOVE','HAHA','THUMBS-UP','THUMBS-DOWN','ANGRY','SAD']",""],"id":2}],[{"start":{"row":173,"column":0},"end":{"row":275,"column":0},"action":"remove","lines":["@pytest.mark.django_db","def test_react_to_post_with_invalid_user_id_raises_InvalidUserException(user,post):","    #arrange","    user_id = 2","    post_id = 1","    reaction_type = \"HAHA\"","    #act","    with pytest.raises(InvalidUserException) as e:","        assert react_to_post(user_id,post_id,reaction_type)","    ","    #assert","    user = User.objects.filter(id = user_id)","    ","    assert str(e.value)   ==   \"\"","    assert len(user)   ==   0","    ","@pytest.mark.django_db","def test_react_post_with_invalid_post_id_raises_InvalidPostException(user,post):","    #arrange","    user_id = 1","    post_id = 3","    reaction_type = \"HAHA\"","    #act","    with pytest.raises(InvalidPostException) as e:","        assert react_to_post(user_id,post_id,reaction_type)","    ","    #assert","    post = Post.objects.filter(id = post_id)","    ","    assert str(e.value)   ==   \"\"","    assert len(post)   ==   0","    ","    ","@pytest.mark.django_db","def test_react_to_post_with_invalid_reaction_type_raises_InvalidReactionTypeException(user,post):","    #arrange","    user_id = 1","    post_id = 1","    reaction_type = \"LIKE\"","    #act","    with pytest.raises(InvalidReactionTypeException) as e:","        assert react_to_post(user_id,post_id,reaction_type)","    ","    #assert","    assert str(e.value)   ==   \"\"","    # assert reaction_type not in ['WOW','LIT','LOVE','HAHA','THUMBS-UP','THUMBS-DOWN','ANGRY','SAD']","","@pytest.mark.django_db","def test_react_to_post_with_valid_details_creates_new_reaction(user,post):","    #arrange","    user_id = 1","    post_id = 1","    reaction_type = \"HAHA\"","    #act","    react_to_post(user_id,post_id,reaction_type)","    ","    #assert","    #extra","    reaction = Reaction.objects.get(reacted_by_id = user_id,post_id = post_id,reaction = reaction_type)","    ","    assert reaction.reacted_by  ==  user","    assert reaction.post  ==  post","    assert reaction.reaction  ==  reaction_type","    # assert reaction.reaction in ['WOW','LIT','LOVE','HAHA','THUMBS-UP','THUMBS-DOWN','ANGRY','SAD']","    ","@pytest.mark.django_db","def test_react_to_post_with_same_reaction_deletes_reaction(user,post,post_reaction):","    #arrange","    user_id = 1","    post_id = 1","    reaction_type = \"WOW\"","    length_before_delete = len(Reaction.objects.filter(reacted_by_id = user_id,post_id = post_id,reaction = reaction_type))","    #act","    react_to_post(user_id,post_id,reaction_type)","    ","    #assert","    #extra","    reaction = Reaction.objects.filter(reacted_by_id = user_id,post_id = post_id,reaction = reaction_type)","    ","    assert len(reaction)  ==  0","    assert length_before_delete   ==   1","    ","@pytest.mark.parametrize(\"new_reaction_type\", [(\"HAHA\"),(\"SAD\"),(\"ANGRY\")",""," ])   ","@pytest.mark.django_db","def test_react_to_post_with_different_reaction_updates_reaction(user,post,post_reaction,new_reaction_type):","    #arrange","    user_id = 1","    post_id = 1","    reaction_type = new_reaction_type","    #act","    react_to_post(user_id,post_id,reaction_type)","    ","    #assert","    #extra","    reaction = Reaction.objects.get(reacted_by_id = user_id,post_id = post_id,reaction = reaction_type)","    ","    assert reaction.reacted_by  ==  user","    assert reaction.post  ==  post","    assert reaction.reaction  ==  reaction_type","    # assert reaction.reaction in ['WOW','LIT','LOVE','HAHA','THUMBS-UP','THUMBS-DOWN','ANGRY','SAD']",""],"id":3}],[{"start":{"row":244,"column":0},"end":{"row":308,"column":37},"action":"remove","lines":["@pytest.mark.django_db","def test_delete_post_with_inavlid_user_id_raises_InavalidUserException(user,post):","    #arrange","    user_id  =  2","    post_id  =  1","    ","    #act","    with pytest.raises(InvalidUserException) as e:","        assert delete_post(user_id,post_id)","    ","    #assert","    user = User.objects.filter(id = user_id)","    ","    assert str(e.value)   ==   \"\"","    assert len(user)   ==   0","    ","@pytest.mark.django_db","def test_delete_post_with_inavlid_post_id_raises_InavalidPostException(user,post):","    #arrange","    user_id  =  1","    post_id  =  2","    ","    #act","    with pytest.raises(InvalidPostException) as e:","        assert delete_post(user_id,post_id)","    ","    #assert","    post = Post.objects.filter(id = post_id)","    ","    assert str(e.value)   ==   \"\"","    assert len(post)   ==   0","    ","@pytest.mark.django_db","def test_delete_post_when_post_id_not_created_by_user_id_raises_UserCannotDeletePostException(users,post):","    #arrange","    user_id  =  2","    post_id  =  1","    ","    #act","    with pytest.raises(UserCannotDeletePostException) as e:","        assert delete_post(user_id,post_id)","    ","    #assert","    #extra","    post = Post.objects.get(id = post_id)","    ","    assert str(e.value)   ==   \"\"","    assert post.posted_by_id !=  user_id","    ","@pytest.mark.django_db","def test_delete_post_with_valid_details_deletes_post(users,post):","    #arrange","    user_id  =  1","    post_id  =  1","    before_delete_post = len(Post.objects.filter(posted_by  =  user_id , id  =  post_id))","    #act","    ","    delete_post(user_id,post_id)","    ","    #assert","    #extra","    after_delete_post  =  len(Post.objects.filter(posted_by  =  user_id , id  =  post_id))","    ","    assert before_delete_post   ==   1","    assert after_delete_post   ==   0"],"id":4}],[{"start":{"row":324,"column":49},"end":{"row":324,"column":50},"action":"insert","lines":["r"],"id":5}],[{"start":{"row":324,"column":48},"end":{"row":324,"column":50},"action":"remove","lines":["er"],"id":6},{"start":{"row":324,"column":48},"end":{"row":324,"column":63},"action":"insert","lines":["error_exception"]}],[{"start":{"row":330,"column":15},"end":{"row":330,"column":16},"action":"remove","lines":["e"],"id":7}],[{"start":{"row":330,"column":15},"end":{"row":330,"column":16},"action":"insert","lines":["e"],"id":9}],[{"start":{"row":324,"column":48},"end":{"row":324,"column":63},"action":"remove","lines":["error_exception"],"id":10}],[{"start":{"row":324,"column":48},"end":{"row":324,"column":49},"action":"insert","lines":["e"],"id":11}],[{"start":{"row":111,"column":0},"end":{"row":172,"column":0},"action":"remove","lines":["@pytest.mark.django_db","def test_reply_to_comment_with_invalid_user_id_raise_InvalidUserException(user,comment):","    #arrange","    user_id = 2","    comment_id = 1","    reply_content = \"comment1_reply\"","    #act","    with pytest.raises(InvalidUserException) as e:","        assert reply_to_comment(user_id,comment_id,reply_content)","    ","    #assert","    user = User.objects.filter(id = user_id)","    ","    assert str(e.value)   ==   \"\"","    assert len(user)   ==   0","    ","@pytest.mark.django_db","def test_reply_to_comment_with_invalid_comment_id_raise_InvalidCommentException(user,comment):","    #arrange","    user_id = 1","    comment_id = 2","    reply_content = \"comment1_reply\"","    #act","    with pytest.raises(InvalidCommentException) as e:","        assert reply_to_comment(user_id,comment_id,reply_content)","    ","    #assert","    comment = Comment.objects.filter(id = comment_id)","    ","    assert str(e.value)   ==   \"\"","    assert len(comment)   ==   0","    ","@pytest.mark.django_db","def test_reply_to_comment_with_invalid_comment_content_raise_InvalidReplyContentException(user,comment):","    #arrange","    user_id = 1","    comment_id = 1","    reply_content = \"\"","    #act","    with pytest.raises(InvalidReplyContent) as e:","        assert reply_to_comment(user_id,comment_id,reply_content)","    ","    #assert","    assert str(e.value)   ==   \"\"","    assert reply_content  ==  \"\"","    ","@pytest.mark.django_db","def test_reply_to_comment_with_valid_details_returns_comment_id(user,comment):","    user_id = 1","    comment_id = 1","    reply_content = \"comment1_reply\"","    #act","    comment_id = reply_to_comment(user_id,comment_id,reply_content)","    ","    #assert","    #extra","    new_comment = Comment.objects.get(id = comment_id)","    ","    assert new_comment.commented_by  ==  user","    assert new_comment.parent_comment  ==  comment","    assert new_comment.content  ==  reply_content",""],"id":12}]]},"ace":{"folds":[],"scrolltop":5009.513196548402,"scrollleft":0,"selection":{"start":{"row":111,"column":0},"end":{"row":111,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1587815025865,"hash":"bac8c46fd6dfdb7cabea596f424ba5bad4d1fa60"}