{"changed":true,"filter":false,"title":"test_get_post_metrics.py","tooltip":"/fb_post_learning/fb_post_v2/tests/interactors/test_get_post_metrics.py","value":"from unittest.mock import create_autospec\nimport pytest\nfrom fb_post_v2.interactors.get_reaction_metrics_interactor import GetReactionMetricsInteractor\nfrom fb_post_v2.interactors.presenters.presenter_interface import PresenterInterface\nfrom fb_post_v2.interactors.storages.reaction_storage_interface import StorageInterface\nfrom django_swagger_utils.drf_server.exceptions import BadRequest, NotFound\nfrom fb_post_v2.interactors.storages.dtos import *\n\n\ndef test_get_reaction_metrics_with_invalid_post_id_raise_invalid_post_id_exception():\n\n    #arrange\n    post_id = -1\n    storage = create_autospec(StorageInterface)\n    presenter = create_autospec(PresenterInterface)\n    storage.is_valid_post_id.return_value = False\n    presenter.raise_invalid_post_id_exception.side_effect = NotFound\n    interactor = GetReactionMetricsInteractor(\n        storage = storage,\n        presenter = presenter\n    )\n    #act\n    with pytest.raises(NotFound):\n        interactor.get_reaction_metrics(\n            post_id=post_id\n        )\n    #assert\n    storage.is_valid_post_id.assert_called_once_with(post_id)\n    presenter.raise_invalid_post_id_exception.assert_called_once()\n\n\ndef test_given_valid_post_id_return_reaction_metrics_list():\n        post_id = 2\n        expected_output = {\"THUBS-UP\": 2}\n        reaction_metrics_dto = [ReactionMetricsDto(\n            reaction=\"THUBS-UP\",\n            count=2)]\n        storage = create_autospec(StorageInterface)\n        presenter = create_autospec(PresenterInterface)\n        interactor = GetReactionMetricsInteractor(storage=storage,\n                                                    presenter=presenter)\n        storage.is_valid_post_id.return_value = True\n        storage.get_reaction_metrics_dto.return_value = reaction_metrics_dto\n        presenter.get_reaction_metrics_dto_response.return_value = \\\n            expected_output\n\n        reaction_metrics_list = interactor.get_reaction_metrics(\n            post_id=post_id\n        )\n\n        assert reaction_metrics_list == expected_output\n        storage.is_valid_post_id.assert_called_once_with(\n            post_id=post_id)\n        storage.get_reaction_metrics_dto.assert_called_once_with(\n            post_id=post_id)\n        presenter.get_reaction_metrics_dto_response.assert_called_once_with(reaction_metrics_dto)","undoManager":{"mark":-2,"position":1,"stack":[[{"start":{"row":4,"column":37},"end":{"row":4,"column":38},"action":"insert","lines":["r"],"id":336}],[{"start":{"row":4,"column":37},"end":{"row":4,"column":55},"action":"remove","lines":["rstorage_interface"],"id":337},{"start":{"row":4,"column":37},"end":{"row":4,"column":63},"action":"insert","lines":["reaction_storage_interface"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":4,"column":63},"end":{"row":4,"column":63},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1589947537677}