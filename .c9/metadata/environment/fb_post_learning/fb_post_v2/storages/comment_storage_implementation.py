{"filter":false,"title":"comment_storage_implementation.py","tooltip":"/fb_post_learning/fb_post_v2/storages/comment_storage_implementation.py","undoManager":{"mark":16,"position":16,"stack":[[{"start":{"row":5,"column":37},"end":{"row":5,"column":38},"action":"insert","lines":["c"],"id":2},{"start":{"row":5,"column":38},"end":{"row":5,"column":39},"action":"insert","lines":["o"]},{"start":{"row":5,"column":39},"end":{"row":5,"column":40},"action":"insert","lines":["m"]},{"start":{"row":5,"column":40},"end":{"row":5,"column":41},"action":"insert","lines":["m"]},{"start":{"row":5,"column":41},"end":{"row":5,"column":42},"action":"insert","lines":["e"]},{"start":{"row":5,"column":42},"end":{"row":5,"column":43},"action":"insert","lines":["n"]},{"start":{"row":5,"column":43},"end":{"row":5,"column":44},"action":"insert","lines":["t"]}],[{"start":{"row":5,"column":44},"end":{"row":5,"column":45},"action":"insert","lines":["_"],"id":3}],[{"start":{"row":9,"column":0},"end":{"row":14,"column":0},"action":"remove","lines":["    def create_post(self, user_id: int, post_content: str) ->int:","        post = Post.objects.create(posted_by_id=user_id,","                                   content=post_content)","        post_id = post.id","        return post_id",""],"id":4},{"start":{"row":8,"column":46},"end":{"row":9,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":56,"column":4},"end":{"row":166,"column":0},"action":"remove","lines":["def react_to_post(self, user_id: int, post_id: int, reaction_type: str):","        Reaction.objects.create(user_id=user_id,","                                 post_id=post_id,","                                 reaction_type=reaction_type)","","    def make_undo_to_post_reaction(self, user_id: int,","                                   post_id: int,","                                   reaction_type: str):","        Reaction.objects.get(user_id=user_id,","                              post_id=post_id).delete()","","    def update_post_reaction(self, user_id: int,","                             post_id: int,","                             reaction_type: str):","        Reaction.objects.filter(user_id=user_id,","                                 post_id=post_id).update(","            reaction_type=reaction_type)","","    def is_reaction_type_existed(self, reaction_type: str) -> bool:","        pass","","    def is_post_reaction_existed(self, user_id: int, post_id: int) -> bool:","        try:","            Reaction.objects.get(reacted_by_id=user_id, post_id=post_id)","        except Reaction.DoesNotExist:","            return False","        return True","","    def is_reaction_type_valid(self, reaction_type: str) -> bool:","        pass","","    def react_to_comment(self, user_id: int,","                         comment_id: int,","                         reaction_type: str):","        Reaction.objects.create(user_id=user_id,","                                 comment_id=comment_id,","                                 reaction_type=reaction_type)","","    def make_undo_to_comment_reaction(self, user_id: int,","                                      comment_id: int,","                                      reaction_type: str):","        Reaction.objects.get(user_id=user_id,","                              comment_id=comment_id).delete()","","    def update_comment_reaction(self, user_id: int,","                                comment_id: int,","                                reaction_type: str):","        Reaction.objects.filter(user_id=user_id,","                                 comment_id=comment_id).update(","            reaction_type=reaction_type)","","    def is_comment_reaction_existed(self, user_id: int,","                                    comment_id: int) -> bool:","        try:","            Reaction.objects.get(reacted_by_id=user_id, comment_id=comment_id)","        except Reaction.DoesNotExist:","            return False","        return True","","    def get_total_reaction_count(self) -> int:","        total_reaction_count = Reaction.objects.aggregate(count=Count('id'))","        return total_reaction_count","","    def can_user_delete_post(self, user_id: int, post_id: int) -> bool:","        try:","            Post.objects.get(id=post_id, posted_by_id=user_id)","        except Post.DoesNotExist:","            return False","        return True","","    def delete_post(self, user_id: int, post_id: int):","        Post.objects.get(id=post_id, posted_by_id=user_id).delete()","        return","","    def get_posts_with_more_positive_reactions(self) -> List[int]:","        positive_reactions = [ReactionType.THUMBS_UP.value,","                              ReactionType.LIT.value,","                              ReactionType.WOW.value,","                              ReactionType.HAHA.value,","                              ReactionType.LOVE.value]","        negative_reactions = [ReactionType.THUMBS_DOWN.value,","                              ReactionType.SAD.value,","                              ReactionType.ANGRY.value]","","        positive_reactions_count = Count('reaction', filter=Q(","            reaction__in=positive_reactions))","        negative_reactions_count = Count('reaction', filter=Q(","            reaction__in=negative_reactions))","","        post_ids = Reaction.objects.filter(comment_id__isnull=True).values('post').\\","                    annotate(","                        positive_count=positive_reactions_count,","                        negative_count=negative_reactions_count","                    ).filter(","                        positive_count__gt=F('negative_count')","                    ).values_list(","                        'post_id', flat=True","                    ).distinct()","        post_ids_list = list(post_ids)","        return post_ids_list","","    def get_posts_reacted_by_user(self, user_id) -> List[int]:","        post_ids = Reaction.objects.filter(","                reacted_by__id=user_id,","                comment_id__isnull=True","                ).values_list(","                    'post_id', flat=True","                ).distinct()","        post_ids_list = list(post_ids)","        return post_ids_list",""],"id":5},{"start":{"row":56,"column":0},"end":{"row":56,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":55,"column":0},"end":{"row":56,"column":0},"action":"remove","lines":["",""],"id":6}],[{"start":{"row":60,"column":0},"end":{"row":277,"column":23},"action":"remove","lines":["    def get_reaction_metrics_dto(self,","                                 post_id: int) -> List[ReactionMetricsDto]:","        reaction = Reaction.objects.filter(post_id=post_id).values('reaction').\\","                    annotate(","                        count=Count('reaction')","                    ).values_list('reaction', 'count')","","        reaction_metrics_dict = dict(reaction)","        return reaction_metrics_dict","","    def get_post_dto(self, post_id: int) -> PostCompleteDetailsDto:","        prefetch_reactions = Prefetch('reactions',","                                      queryset=Reactions.objects.filter(","                                          post_id=post_id))","        prefetch_comments = Prefetch(","            'comments', queryset=Comment.objects.select_related('commented_by').","                prefetch_related(Prefetch('reactions')).","                prefetch_related('parent_comment__commented_by').","                prefetch_related('parent_comment__reactions')","        )","","        post = Post.objects.select_related('user').prefetch_related(","            prefetch_reactions, prefetch_comments).get(id=post_id)","","        post_details_dto_obj = self._get_post_details_dto_obj(post)","","        return post_details_dto_obj","","","    def get_user_posts_dto(self, user_id: int) -> UserPostsCompleteDetailsDto:","        prefetch_reactions = Prefetch('reactions',","                                      queryset=Reactions.objects.filter(","                                          post_id=post_id))","        prefetch_comments = Prefetch(","            'comments', queryset=Comment.objects.select_related('commented_by').","                prefetch_related(Prefetch('reactions')).","                prefetch_related('parent_comment__commented_by').","                prefetch_related('parent_comment__reactions')","        )","","        posts = Post.objects.select_related('user').prefetch_related(","            prefetch_reactions, prefetch_comments).get(posted_by_id=user_id)","","        list_of_posts_details_dtos_obj = self._get_posts_details_dtos_obj(posts)","        return list_of_posts_details_dtos_obj","","    def _get_post_details_dto_obj(self, post):","        post_user_dto_dict = {}","        reaction_dtos = []","        post_dto = self._convert_post_obj_to_dto(post)","        post_reaction_dtos = self._get_object_reactions(post)","        posted_user = post.posted_by","","        user_dto = self._convert_user_object_to_dto(posted_user)","        user_id = user_dto.user_id","        post_user_dto_dict[user_id] = user_dto","        comments = post.comments.all()","        users_dto_dict, comment_dtos, comment_reaction_dtos = \\","            self._get_comments_details(comments)","","        reply_dtos, reply_reaction_dtos = self._get_replies_details(comments)","","        reaction_dtos += post_reaction_dtos","        reaction_dtos += comment_reaction_dtos","        reaction_dtos += reply_reaction_dtos","        comment_dtos += reply_dtos","","        users_dto_dict.update(post_user_dto_dict)","        ","        user_dtos = list(users_dto_dict.values())","        post_details_dto = PostCompleteDetailsDto(post_dto=post_dto,","                                                  reactions_dto=reaction_dtos,","                                                  comments_dto=comment_dtos,","                                                  users_dto=user_dtos)","        return post_details_dto","","    def _get_posts_details_dtos_obj(self, posts):","        post_user_dto_dict = {}","        reaction_dtos, post_reaction_dtos, user_dto = [], [], []","        posts_dto, comments = [], []","        for post in posts:","            posts_dto += self._convert_post_obj_to_dto(post)","            post_reaction_dtos += self._get_object_reactions(posts)","            posted_user = post.posted_by","","            user_dto = self._convert_user_object_to_dto(posted_user)","            user_id = user_dto.user_id","            post_user_dto_dict[user_id] = user_dto","            comments += post.comments.all()","        users_dto_dict, comment_dtos, comment_reaction_dtos = \\","            self._get_comments_details(comments)","","        reply_dtos, reply_reaction_dtos = self._get_replies_details(comments)","","        reaction_dtos += post_reaction_dtos","        reaction_dtos += comment_reaction_dtos","        reaction_dtos += reply_reaction_dtos","        comment_dtos += reply_dtos","","        users_dto_dict.update(post_user_dto_dict)","        ","        user_dtos = list(users_dto_dict.values())","        user_posts_details_dto = PostCompleteDetailsDto(post_dto=post_dto,","                                                  reactions_dto=reaction_dtos,","                                                  comments_dto=comment_dtos,","                                                  users_dto=user_dtos)","        return user_posts_details_dto","","    def _convert_post_obj_to_dto(self, post):","        post_dto = PostDto(","            user_id=post.posted_by_id,","            post_content=post.content,","            post_id= post.id,","            pub_date_time=post.posted_at","        )","        return post_dto","","    def _get_reactions(self, list_of_objects):","        reaction_dtos = []","        for object in list_of_objects:","            object_reaction_dtos = self._get_object_reactions(object)","            reaction_dtos += object_reaction_dtos","        return reaction_dtos","","    def _get_object_reactions(self, object):","        reaction_dtos = []","        reactions = object.reactions.all()","        for reaction in reactions:","            reaction_dto = self._convert_reaction_object_to_dto(reaction)","            reaction_dtos.append(reaction_dto)","        return reaction_dtos","","    def _convert_comment_obj_to_dto(self, comment):","        comment_dto = CommentDto(","            comment_id=comment.id,","            user_id=comment.user.id,","            post_id=comment.post.id,","            comment_content=comment.comment_text,","            pub_date_time=comment.pub_date_time.replace(tzinfo=None),","            parent_comment=comment.parent_comment)","        return comment_dto","","    def _convert_reaction_object_to_dto(self, reaction):","        reaction_dto = ReactionDto(","            reaction_id=reaction.id,","            comment_id=reaction.comment_id,","            post_id=reaction.post_id,","            user_id=reaction.reacted_by_id,","            reaction_type=reaction.reaction","        )","        return reaction_dto","","    def _get_comments_details(self, comments):","        users_dto_dict = {}","        comments_dtos = []","        comments_reaction_dtos = []","","        for comment in comments:","            users_dto_dict, comment_dto, comment_reaction_dto = \\","                self._get_comment_details(comment)","            comments_dtos += comment_dto","            comments_reaction_dtos += comment_reaction_dto","            users_dto_dict.update(users_dto_dict)","","        return users_dto_dict, comments_dtos, comments_reaction_dtos","","    def _get_comment_details(self, comment):","        users_dto_dict = {}","        comment_dtos = []","        comment_dto = self._convert_comment_obj_to_dto(comment)","        comment_dtos.append(comment_dto)","        comment_user = comment.commented_by","","        user_dto = self._convert_user_object_to_dto(comment_user)","        user_id = user_dto.user_id","        users_dto_dict[user_id] = user_dto","","        comment_reaction_dtos = self._get_reactions(","            comment)","","        return users_dto_dict, comment_dtos, comment_reaction_dtos","","    def _get_replies_details(self, comments):","        reply_dtos = []","        reply_reaction_dtos = []","","        for comment in comments:","            comment_dto, comment_reaction_dto = self._get_reply_details(","                comment)","            reply_dtos += comment_dto","            reply_reaction_dtos += comment_reaction_dto","","        return reply_dtos, reply_reaction_dtos","","    def _get_reply_details(self, comment):","        users_dto_dict = {}","        reply_dtos = []","        reply_reaction_dtos = []","        replies = comment.comments.all()","        for reply in replies:","            reply_dto = self._convert_comment_obj_to_dto(reply)","            reply_dtos.append(reply_dto)","","        reply_reaction_dtos += self._get_reactions(replies)","        for reply in replies:","            user = reply.commented_by","            user_dto = self._convert_user_object_to_dto(user)","            user_id = user_dto.user_id","            users_dto_dict[user_id] = user_dto","        return reply_dtos, reply_reaction_dtos","","    def _convert_user_object_to_dto(self, user):","        user_dto = UserDto(","            user_id=user.id,","            name=user.name,","            profile_pic=user.profile_pic","        )","        return user_dto"],"id":7},{"start":{"row":59,"column":0},"end":{"row":60,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":58,"column":11},"end":{"row":58,"column":12},"action":"remove","lines":["s"],"id":8},{"start":{"row":58,"column":10},"end":{"row":58,"column":11},"action":"remove","lines":["s"]},{"start":{"row":58,"column":9},"end":{"row":58,"column":10},"action":"remove","lines":["a"]},{"start":{"row":58,"column":8},"end":{"row":58,"column":9},"action":"remove","lines":["p"]}],[{"start":{"row":58,"column":8},"end":{"row":79,"column":21},"action":"insert","lines":["replies = Comment.objects.filter(","                parent_comment_id=comment_id","                ).select_related('commented_by')","","    replies_list = []","    for reply in replies:","        reply_dict = get_reply_details_dict(reply)","        replies_list.append(reply_dict)","","    return replies_list","","","def get_reply_details_dict(reply):","","    reply_dict = {","        \"comment_id\": reply.id,","        \"commenter\": get_user_dict(reply.commented_by),","        \"commented_at\": convert_date_time_into_strf_format(reply.commented_at),","        \"comment_content\": reply.content","    }","","    return reply_dict"],"id":9}],[{"start":{"row":62,"column":0},"end":{"row":62,"column":4},"action":"insert","lines":["    "],"id":10},{"start":{"row":63,"column":0},"end":{"row":63,"column":4},"action":"insert","lines":["    "]},{"start":{"row":64,"column":0},"end":{"row":64,"column":4},"action":"insert","lines":["    "]},{"start":{"row":65,"column":0},"end":{"row":65,"column":4},"action":"insert","lines":["    "]},{"start":{"row":66,"column":0},"end":{"row":66,"column":4},"action":"insert","lines":["    "]},{"start":{"row":67,"column":0},"end":{"row":67,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":64,"column":25},"end":{"row":64,"column":26},"action":"insert","lines":["_"],"id":11}],[{"start":{"row":70,"column":4},"end":{"row":70,"column":5},"action":"insert","lines":["_"],"id":12}],[{"start":{"row":75,"column":63},"end":{"row":75,"column":64},"action":"remove","lines":["y"],"id":13},{"start":{"row":75,"column":62},"end":{"row":75,"column":63},"action":"remove","lines":["l"]},{"start":{"row":75,"column":61},"end":{"row":75,"column":62},"action":"remove","lines":["p"]},{"start":{"row":75,"column":60},"end":{"row":75,"column":61},"action":"remove","lines":["e"]},{"start":{"row":75,"column":59},"end":{"row":75,"column":60},"action":"remove","lines":["r"]},{"start":{"row":75,"column":58},"end":{"row":75,"column":59},"action":"remove","lines":["("]},{"start":{"row":75,"column":57},"end":{"row":75,"column":58},"action":"remove","lines":["t"]},{"start":{"row":75,"column":56},"end":{"row":75,"column":57},"action":"remove","lines":["a"]},{"start":{"row":75,"column":55},"end":{"row":75,"column":56},"action":"remove","lines":["m"]},{"start":{"row":75,"column":54},"end":{"row":75,"column":55},"action":"remove","lines":["r"]},{"start":{"row":75,"column":53},"end":{"row":75,"column":54},"action":"remove","lines":["o"]},{"start":{"row":75,"column":52},"end":{"row":75,"column":53},"action":"remove","lines":["f"]},{"start":{"row":75,"column":51},"end":{"row":75,"column":52},"action":"remove","lines":["_"]},{"start":{"row":75,"column":50},"end":{"row":75,"column":51},"action":"remove","lines":["f"]},{"start":{"row":75,"column":49},"end":{"row":75,"column":50},"action":"remove","lines":["r"]},{"start":{"row":75,"column":48},"end":{"row":75,"column":49},"action":"remove","lines":["t"]},{"start":{"row":75,"column":47},"end":{"row":75,"column":48},"action":"remove","lines":["s"]}],[{"start":{"row":75,"column":46},"end":{"row":75,"column":47},"action":"remove","lines":["_"],"id":14},{"start":{"row":75,"column":45},"end":{"row":75,"column":46},"action":"remove","lines":["o"]},{"start":{"row":75,"column":44},"end":{"row":75,"column":45},"action":"remove","lines":["t"]},{"start":{"row":75,"column":43},"end":{"row":75,"column":44},"action":"remove","lines":["n"]},{"start":{"row":75,"column":42},"end":{"row":75,"column":43},"action":"remove","lines":["i"]},{"start":{"row":75,"column":41},"end":{"row":75,"column":42},"action":"remove","lines":["_"]},{"start":{"row":75,"column":40},"end":{"row":75,"column":41},"action":"remove","lines":["e"]},{"start":{"row":75,"column":39},"end":{"row":75,"column":40},"action":"remove","lines":["m"]},{"start":{"row":75,"column":38},"end":{"row":75,"column":39},"action":"remove","lines":["i"]},{"start":{"row":75,"column":37},"end":{"row":75,"column":38},"action":"remove","lines":["t"]},{"start":{"row":75,"column":36},"end":{"row":75,"column":37},"action":"remove","lines":["_"]},{"start":{"row":75,"column":35},"end":{"row":75,"column":36},"action":"remove","lines":["e"]},{"start":{"row":75,"column":34},"end":{"row":75,"column":35},"action":"remove","lines":["t"]},{"start":{"row":75,"column":33},"end":{"row":75,"column":34},"action":"remove","lines":["a"]},{"start":{"row":75,"column":32},"end":{"row":75,"column":33},"action":"remove","lines":["d"]},{"start":{"row":75,"column":31},"end":{"row":75,"column":32},"action":"remove","lines":["_"]},{"start":{"row":75,"column":30},"end":{"row":75,"column":31},"action":"remove","lines":["t"]}],[{"start":{"row":75,"column":30},"end":{"row":75,"column":31},"action":"remove","lines":["."],"id":15},{"start":{"row":75,"column":29},"end":{"row":75,"column":30},"action":"remove","lines":["r"]},{"start":{"row":75,"column":28},"end":{"row":75,"column":29},"action":"remove","lines":["e"]},{"start":{"row":75,"column":27},"end":{"row":75,"column":28},"action":"remove","lines":["v"]},{"start":{"row":75,"column":26},"end":{"row":75,"column":27},"action":"remove","lines":["n"]},{"start":{"row":75,"column":25},"end":{"row":75,"column":26},"action":"remove","lines":["o"]},{"start":{"row":75,"column":24},"end":{"row":75,"column":25},"action":"remove","lines":["c"]}],[{"start":{"row":75,"column":36},"end":{"row":75,"column":37},"action":"remove","lines":[")"],"id":16}],[{"start":{"row":75,"column":36},"end":{"row":75,"column":37},"action":"insert","lines":["."],"id":17}],[{"start":{"row":75,"column":37},"end":{"row":75,"column":69},"action":"insert","lines":["strftime(\"%Y-%m-%d %H:%M:%S.%f\")"],"id":18}]]},"ace":{"folds":[],"scrolltop":703.7126342184514,"scrollleft":0,"selection":{"start":{"row":65,"column":43},"end":{"row":65,"column":43},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1590421469729,"hash":"a0db2fa85bf6a2189282379ab6692d97945542d1"}